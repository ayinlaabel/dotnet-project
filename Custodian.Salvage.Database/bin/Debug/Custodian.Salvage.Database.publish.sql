/*
Deployment script for salvage

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "salvage"
:setvar DefaultFilePrefix "salvage"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
/*
The column [dbo].[tblBidItems].[closed_date] is being dropped, data loss could occur.

The column [dbo].[tblBidItems].[Close_Date] on table [dbo].[tblBidItems] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The type for column Brand in table [dbo].[tblBidItems] is currently  VARCHAR (100) NOT NULL but is being changed to  VARCHAR (50) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  VARCHAR (50) NOT NULL.

The type for column Model in table [dbo].[tblBidItems] is currently  VARCHAR (100) NOT NULL but is being changed to  VARCHAR (50) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  VARCHAR (50) NOT NULL.

The type for column Regno in table [dbo].[tblBidItems] is currently  VARCHAR (250) NOT NULL but is being changed to  VARCHAR (100) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  VARCHAR (100) NOT NULL.

The type for column Title in table [dbo].[tblBidItems] is currently  VARCHAR (250) NOT NULL but is being changed to  VARCHAR (50) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  VARCHAR (50) NOT NULL.
*/

IF EXISTS (select top 1 1 from [dbo].[tblBidItems])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column BidValue on table [dbo].[tblBidRequest] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column Created_At on table [dbo].[tblBidRequest] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The type for column Email in table [dbo].[tblBidRequest] is currently  VARCHAR (250) NOT NULL but is being changed to  VARCHAR (100) NOT NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  VARCHAR (100) NOT NULL.

The column Updated_At on table [dbo].[tblBidRequest] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[tblBidRequest])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column LocationDescription in table [dbo].[tblLocations] is currently  VARCHAR (250) NOT NULL but is being changed to  VARCHAR (150) NULL. Data loss could occur and deployment may fail if the column contains data that is incompatible with type  VARCHAR (150) NULL.
*/

IF EXISTS (select top 1 1 from [dbo].[tblLocations])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Starting rebuilding table [dbo].[tblBidItemImage]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblBidItemImage] (
    [id]         INT            IDENTITY (1, 1) NOT NULL,
    [BidItemId]  INT            NOT NULL,
    [ImageUrl]   NVARCHAR (250) NOT NULL,
    [ImageTag]   VARCHAR (100)  NOT NULL,
    [Created_At] DATETIME2 (7)  NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_tblBidItemImage1] PRIMARY KEY CLUSTERED ([id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblBidItemImage])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_tblBidItemImage] ON;
        INSERT INTO [dbo].[tmp_ms_xx_tblBidItemImage] ([id], [bidItemId], [imageUrl], [imageTag], [created_at])
        SELECT   [id],
                 [bidItemId],
                 [imageUrl],
                 [imageTag],
                 [created_at]
        FROM     [dbo].[tblBidItemImage]
        ORDER BY [id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_tblBidItemImage] OFF;
    END

DROP TABLE [dbo].[tblBidItemImage];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblBidItemImage]', N'tblBidItemImage';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_tblBidItemImage1]', N'PK_tblBidItemImage', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[tblBidItems]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblBidItems] (
    [id]            INT           IDENTITY (1, 1) NOT NULL,
    [Title]         VARCHAR (50)  NOT NULL,
    [Regno]         VARCHAR (100) NOT NULL,
    [Description]   VARCHAR (250) NOT NULL,
    [ContactPerson] VARCHAR (100) NOT NULL,
    [Brand]         VARCHAR (50)  NOT NULL,
    [Model]         VARCHAR (50)  NOT NULL,
    [Close_Date]    DATETIME2 (7) NOT NULL,
    [LocationId]    INT           NOT NULL,
    [Created_At]    DATETIME      NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_tblItems1] PRIMARY KEY CLUSTERED ([id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblBidItems])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_tblBidItems] ON;
        INSERT INTO [dbo].[tmp_ms_xx_tblBidItems] ([id], [title], [regno], [brand], [model], [description], [contactPerson], [locationId], [created_at])
        SELECT   [id],
                 [title],
                 [regno],
                 [brand],
                 [model],
                 [description],
                 [contactPerson],
                 [locationId],
                 [created_at]
        FROM     [dbo].[tblBidItems]
        ORDER BY [id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_tblBidItems] OFF;
    END

DROP TABLE [dbo].[tblBidItems];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblBidItems]', N'tblBidItems';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_tblItems1]', N'PK_tblItems', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[tblBidRequest]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblBidRequest] (
    [id]         INT           IDENTITY (1, 1) NOT NULL,
    [BidItemId]  INT           NOT NULL,
    [Email]      VARCHAR (100) NOT NULL,
    [Narration]  VARCHAR (250) NOT NULL,
    [Status]     VARCHAR (10)  NOT NULL,
    [BidValue]   VARCHAR (50)  NOT NULL,
    [Created_At] DATETIME2 (7) NOT NULL,
    [Updated_At] DATETIME2 (7) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_tblBid1] PRIMARY KEY CLUSTERED ([id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblBidRequest])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_tblBidRequest] ON;
        INSERT INTO [dbo].[tmp_ms_xx_tblBidRequest] ([id], [bidItemId], [email], [status], [narration], [bidValue], [created_at], [updated_at])
        SELECT   [id],
                 [bidItemId],
                 [email],
                 [status],
                 [narration],
                 [bidValue],
                 [created_at],
                 [updated_at]
        FROM     [dbo].[tblBidRequest]
        ORDER BY [id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_tblBidRequest] OFF;
    END

DROP TABLE [dbo].[tblBidRequest];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblBidRequest]', N'tblBidRequest';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_tblBid1]', N'PK_tblBid', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[tblLocations]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblLocations] (
    [Id]                  INT           NOT NULL,
    [LocationAddress]     VARCHAR (250) NULL,
    [LocationDescription] VARCHAR (150) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblLocations])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_tblLocations] ([Id], [locationAddress], [locationDescription])
        SELECT   [Id],
                 [locationAddress],
                 [locationDescription]
        FROM     [dbo].[tblLocations]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[tblLocations];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblLocations]', N'tblLocations';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Table [dbo].[tblAuditLog]...';


GO
CREATE TABLE [dbo].[tblAuditLog] (
    [Id]         INT           NOT NULL,
    [AdminId]    INT           NOT NULL,
    [BidItemId]  INT           NOT NULL,
    [Action]     VARCHAR (250) NOT NULL,
    [ActionDate] DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[tblBidItemLog]...';


GO
CREATE TABLE [dbo].[tblBidItemLog] (
    [Id]         INT           NOT NULL,
    [AdminId]    INT           NOT NULL,
    [BidItemId]  INT           NOT NULL,
    [Action]     VARCHAR (250) NOT NULL,
    [ActionDate] DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[tblBidUploadDetail]...';


GO
CREATE TABLE [dbo].[tblBidUploadDetail] (
    [Id] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[tblBidUploads]...';


GO
CREATE TABLE [dbo].[tblBidUploads] (
    [Id] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblBidItems_tblLocation_idx]...';


GO
ALTER TABLE [dbo].[tblBidItems] WITH NOCHECK
    ADD CONSTRAINT [FK_tblBidItems_tblLocation_idx] FOREIGN KEY ([LocationId]) REFERENCES [dbo].[tblLocations] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblBid_tblBidItems_Idx]...';


GO
ALTER TABLE [dbo].[tblBidRequest] WITH NOCHECK
    ADD CONSTRAINT [FK_tblBid_tblBidItems_Idx] FOREIGN KEY ([BidItemId]) REFERENCES [dbo].[tblBidItems] ([id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tblBidItemImage_tblBidItems_idx]...';


GO
ALTER TABLE [dbo].[tblBidItemImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tblBidItemImage_tblBidItems_idx] FOREIGN KEY ([BidItemId]) REFERENCES [dbo].[tblBidItems] ([id]);


GO
PRINT N'Creating View [dbo].[BidItemFilterView]...';


GO
CREATE VIEW [dbo].[BidItemFilterView]
	AS 
		SELECT 
			a.id,
			a.Created_At DateCreated,
			a.Close_Date BaseLineCloseDate,
			a.Title,
			a.Brand,
			a.Model,
			a.LocationId,
			b.LocationAddress,
			b.LocationDescription,
			c.Action Status
		FROM tblBidItems a
		JOIN tblLocations b ON b.Id = a.LocationId
		JOIN tblBidItemLog c ON c.BidItemId = a.id
		WHERE a.id IN 
			(
				SELECT
					BidItemId
				FROM 
					tblBidItemLog
			)
GO
PRINT N'Creating View [dbo].[BidItemImageView]...';


GO
CREATE VIEW [dbo].[BidItemImageView]
	AS SELECT 
		a.BidItemId,
		a.ImageUrl,
		a.ImageTag
	FROM dbo.tblBidItemImage a
GO
PRINT N'Creating View [dbo].[BidItemsView]...';


GO
CREATE VIEW [dbo].[BidItemsView]
	AS SELECT
		a.id,
		a.Title,
		a.Brand,
		a.Model,
		a.LocationId,
		b.LocationAddress,
		b.LocationDescription,
		a.Description,
		c.ImageTag,
		c.ImageUrl,
		a.Close_Date BaselineCloseDate,
		a.Created_At DateCreated
	FROM dbo.tblBidItems a
	JOIN dbo.tblLocations b on b.Id = a.LocationId
	JOIN dbo.tblBidItemImage c on c.BidItemId = a.id
GO
PRINT N'Creating View [dbo].[BidRequestView]...';


GO
CREATE VIEW [dbo].[BidRequestView]
	AS SELECT
		a.id,
		a.BidItemId,
		a.Email,
		a.BidValue,
		a.Narration
	FROM dbo.tblBidRequest a
GO
PRINT N'Altering Procedure [dbo].[spFetchBidItems]...';


GO

ALTER PROCEDURE [dbo].[spFetchBidItems]
	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		a.id, 
		a.Title, 
		a.BaselineCloseDate, 
		a.Brand, 
		a.Model, 
		a.ImageTag,
		a.ImageUrl,
		a.LocationAddress, 
		a.LocationDescription 
	From BidItemsView a;
END
GO
PRINT N'Altering Procedure [dbo].[spGetBidItem]...';


GO

ALTER PROCEDURE [dbo].[spGetBidItem]
	@id int
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
		a.id, 
		a.Title, 
		a.BaselineCloseDate, 
		a.Brand, 
		a.Model, 
		a.LocationAddress, 
		a.LocationDescription 
	From BidItemsView a
	WHERE a.id = @id;
END
GO
PRINT N'Altering Procedure [dbo].[spGetBidItemImage]...';


GO
ALTER PROCEDURE [dbo].[spGetBidItemImage]
	@id int
AS
BEGIN

	SELECT  
		a.ImageUrl
	FROM BidItemImageView a
	WHERE a.BidItemId = @id;

END
GO
PRINT N'Altering Procedure [dbo].[spSaveBidItemImage]...';


GO
ALTER PROCEDURE [dbo].[spSaveBidItemImage]
	@BidItemId INT,
	@ImageUrl VARCHAR
AS
	INSERT INTO dbo.tblBidItemImage (BidItemId, ImageUrl)
	VALUES (@BidItemId, @ImageUrl);
GO
PRINT N'Altering Procedure [dbo].[spSaveBid]...';


GO
ALTER PROCEDURE [dbo].[spSaveBid]
	@BidItemId INT,
	@Email VARCHAR(250),
	@Narration VARCHAR(250),
	@Status VARCHAR(10),
	@BidValue INT,
	@Created_At DATETIME,
	@Updated_At DATETIME
AS
BEGIN
	INSERT INTO dbo.tblBidRequest
		(
			BidItemId, 
			Email,  
			Narration, 
			Status,
			BidValue,
			Created_At,
			Updated_At
		)
	VALUES 
		(
			@BidItemId,
			@Email,
			@Narration,
			@Status,
			@BidValue,
			@Created_At,
			@Updated_At
		);
END
GO
PRINT N'Creating Procedure [dbo].[SaveBidItem]...';


GO
CREATE PROCEDURE [dbo].[SaveBidItem]
	@Title VARCHAR(100),
	@Brand VARCHAR(100),
	@Model VARCHAR(100),
	@Created_At DATETIME,
	@Close_Date DATETIME,
	@LocationId INT
AS
BEGIN
	INSERT INTO dbo.tblBidItems (Title, Brand, Model, Close_Date, Created_At, LocationId) 
	VALUES (@Title, @Brand, @Model, @Close_Date, @Created_At, @LocationId);
END
GO
PRINT N'Creating Procedure [dbo].[spGetBidItemsByStatus]...';


GO

CREATE PROCEDURE [dbo].[spGetBidItemsByStatus]
	@status varchar
AS
	SELECT 
		a.id, 
		a.Title, 
		a.BaselineCloseDate, 
		a.Brand, 
		a.Model, 
		a.LocationAddress, 
		a.LocationDescription,
		a.Status
	From BidItemFilterView a
	WHERE a.Status = @status;
GO
PRINT N'Creating Procedure [dbo].[spGetRequestBid]...';


GO
CREATE PROCEDURE [dbo].[spGetRequestBid]
	@BidItemId Int,
	@Email VARCHAR(250)

AS
BEGIN
	SELECT 
		a.Email, 
		a.BidItemId, 
		a.BidValue, 
		a.Narration
	FROM BidRequestView a
	WHERE a.BidItemId = @BidItemId
	AND a.Email = @Email
END
GO
PRINT N'Creating Procedure [dbo].[UpdateBidRequest]...';


GO
CREATE PROCEDURE [dbo].[UpdateBidRequest]
	@BidItemId int,
	@Email VARCHAR(250),
	@Status VARCHAR(250),
	@Updated_At DATETIME
AS
BEGIN
	UPDATE tblBidRequest
	SET Status = @Status, 
		Updated_At =  @Updated_At
	WHERE BidItemId = @BidItemId
	AND Email = @Email
	AND Status = 'active'
END
GO
PRINT N'Refreshing Procedure [dbo].[spSaveLocation]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spSaveLocation]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[tblBidItems] WITH CHECK CHECK CONSTRAINT [FK_tblBidItems_tblLocation_idx];

ALTER TABLE [dbo].[tblBidRequest] WITH CHECK CHECK CONSTRAINT [FK_tblBid_tblBidItems_Idx];

ALTER TABLE [dbo].[tblBidItemImage] WITH CHECK CHECK CONSTRAINT [FK_tblBidItemImage_tblBidItems_idx];


GO
PRINT N'Update complete.';


GO
